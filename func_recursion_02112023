//c.cpp
//function recursion 
//debuger ung L10 etcc...

#include<iostream>

int l=0;
int row=0;
int lat=0;

int frec( int p ){//2

      int r=-1;
      row +=1;

      if( row > lat){//4

            lat = row;
      }//4

      if ( p >= l){//3

            row-=1;
            return 1;
      }//3



      r = frec( p+1 ) + frec( p +1);

      std::cout << "\nr  " << r << ", p  "<< p << "\n";

      row-=1;

      return r;
}//2

int main(void)  {//2

      std::cout << "input paramter: ";
      std::cin >> l;
      getchar( );

      int n= frec(0 );

      std::cout << "L11 result: " << n << "\n";

      std::cout << "lat: " << lat << "\n";

      return 0;
}//2


//////////////////////////////////////////////////////////////////

//b.cpp 
//function recursion na mano mano sa loop
//debuger ung L10 etcc...

#include<iostream>
#include<vector>

int l;
int lat=0;

struct st_row{//2 

      int par[2]= {-1,-1};
      int ret[2]= {-1,-1};

};//2


int frec( int par ){//2

      int row=0;
      int sta=0;
      int ret =0;
      std::vector<int> i_col;

      std::vector<struct st_row > m_row;  
      struct st_row blank;

      row +=1;
      m_row.push_back( blank );
      i_col.push_back(1);
    
      m_row[row-1].par[ i_col[row -1] -1] = par;

      while(true){//3

            /*
            std::cout << "\nL11 row -1 " << row -1 << ", i_col[row -1] -1  " << i_col[row -1] -1 << "\n";
            std::cout << "sta " << sta << ", par " << par << ", ret " << ret << "\n";
            std::cout << " m_row[row-1].par[ i_col[row -1] -1] "  <<   m_row[row-1].par[ i_col[row -1] -1] << "\n";
            std::cout << " m_row[row-1].ret[ i_col[row -1] -1] "  <<   m_row[row-1].ret[ i_col[row -1] -1] << "\n";
            */
            //getchar(  );

            if(sta == 0){//4

                  
                  m_row.push_back( blank );
                  i_col.push_back( 1 );
                  row +=1;

                  if(row-1 >lat )  {//10

                        lat = row-1;

                        std::cout << "\nlat " << lat << "\n"; 
                  }//10

                 
                  m_row[row-1].par[ i_col[row -1] -1] = par;

                  //std::cout << "\nL12 " << "\n";

                  if( m_row[row-1].par[ i_col[row -1] -1] >= l){//5
                        //block ending value

                        m_row.pop_back( );
                        i_col.pop_back( );
                        ret = 1;
                        row -=1;
                        par = m_row[row-1].par[ i_col[row -1] -1];
                        sta = 1;

                        if( row-1 == 0) {//8

                              //std::cout << "\nL15 " << "\n"; 

                              m_row[row-1].ret[ (i_col[row -1] -1)] = ret;
                              i_col[row-1] +=1;
                              break;
                        }//8

                        continue;
                  }//5         

                  par = m_row[row-1].par[ i_col[row -1] -1]  + 1;
      
            }  else if(sta ==1)  {//4.2
                  //call back part

                  if( i_col[row-1] -1== 0){//7

                        m_row[row-1].ret[ i_col[row -1] -1]  = ret;

                        //papasok palang sa column 2 (2-1)
                        i_col[row -1] +=1;                        
                        m_row[row-1].par[ i_col[row -1] -1] = par;

                        par +=1;
                        sta = 0;

                        //std::cout << "\nL12_b ret " << ret << ", par " << par << "\n";


                  }else if ( i_col[row-1] -1 == 1){//7.2

                        //std::cout << "\nL12_c ret " << ret << ", par " << par << "\n";      

                        m_row[row-1].ret[ i_col[row -1] -1] = ret;
 
                        ret = m_row[row-1].ret[ i_col[row -1] -1]  + m_row[row-1].ret[ ( i_col[row -1] -1 ) -1]; 
                        
                        /*
                        std::cout << "m_row[row-1].ret[ i_col[row -1] -1] " << m_row[row-1].ret[ i_col[row -1] -1] << ", m_row[row-1].ret[ ( i_col[row -1] -1 ) -1] " << m_row[row-1].ret[ ( i_col[row -1] -1 ) -1] << "\n";            
                        std::cout << "m_row[row-1].par[ i_col[row -1] -1 ] " << m_row[row-1].par[ i_col[row -1] -1 ]  << "\n";            
                        */

                        m_row.pop_back( );
                        i_col.pop_back( );
                        row-=1;
                        par =  m_row[row-1].par[ i_col[row -1] -1 ];            
                        
                        std::cout << "\nret " << ret << ", par " << par << "\n";

                  }//7.2

            }//4.2

            //std::cout << "\nL14 row -1 " << row -1 << "\n"; 

            if( row-1 == 0) {//8

                  //std::cout << "\nL15 " << "\n"; 

                  m_row[row-1].ret[ (i_col[row -1] -1)] = ret;
                  i_col[row-1] +=1;
                  break;
            }//8
      }//3

      return ret;
}//2


int main(  ){//2

      std::cout << "input paramter: ";
      std::cin >> l;
      getchar( );

      int n;
      n = frec( 0);

      std::cout << "\n\nresult of recursion:  " << n << "\n";

      std::cout << "\nlat:  " << lat << ", l is: " << l << "\n";
      return 0;
}//2






