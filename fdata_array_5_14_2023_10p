
//no backup
//input output files
//reference
//https://en.cppreference.com/w/cpp/io/c/rename
// std::rename(current_name, new_name);

#include<iostream>
#include<fstream>
#include<string>
#include<string.h>

#define _FILENAME "data.db"
#define TRANSFER_FILE_NAME "transfer.db"

struct stformat { //2
      int password;
      int length;
}; //2

struct stdata {//2

      int number;
      char date[100];
      char name[100];
      double amount;
      
}; //2

std::ifstream gread;
std::ofstream gwrite;
struct stformat gformat;
struct stdata gdata;
struct stdata gblank_data;

//function declaration
void fdisplay_all(  ) ;
void finitial(  );
struct stdata fdata_array( int pindex, struct stdata pinp_data = gblank_data );
void ffail_cin(  );

void ffail_cin(  ) { //2
      //L50 
      char ch;
      if( std::cin.fail(  ) ) {//10

            std::cin.clear( );

            std::cin.ignore( 1000, '\n');
      } else { //10

            while( 1 ){//11

                  ch = getchar(  );
                  if( ch == 10 ) {//3
                        break;
                  }//3

            }//11
                        
      }//10


}//2


void fdisplay_all(  ) {//2
      //L30 
      
      //reset
      gformat.password = -1;
      gformat.length =-1;
      
      gread.open(_FILENAME, std::ios::binary );
   
      if( !gread ) {//5
            std::cout << "\n\nerror file " << _FILENAME << " cannot found for reading...";
            getchar(  );
            return; 
      }//5

      gread.read(  (char*) &gformat, sizeof( struct stformat )  );
      
      //std::cout << "\ndebug L30 password " << gformat.password << ", length " << gformat.length << "\n";            
      
      if( gformat.length <= 0) {//3 
            std::cout << "\n\nerror no load to reload ";
            getchar(  );
            return;      
      }//3

      std::cout << "\n\nstaring to view length is " << gformat.length;      
      int fir=0;
      while( fir < gformat.length ) {//4

            gread.read(  (char*) &gdata, sizeof( struct stdata )  );

            std::cout << "\n\nindex " << fir;
            std::cout << "\nnumber " << gdata.number ;                  
            std::cout << "\ndate " << gdata.date ;
            std::cout << "\nname " << gdata.name ;
            std::cout << "\namount " << gdata.amount ;
            fir+=1;
       }//4

       gread.close(  );             
}//2

void finitial(  ) {//2
      //L20 
      std::string str;
      int nlen = 10, fir = 0;
      gformat.password = 1234;
      
      //we will put the total 3 earlier than data
      gformat.length =nlen;
      
      gwrite.open( _FILENAME, std::ios::binary );
      
      gwrite.write( (const char*) &gformat, sizeof( struct stformat )  ) ;             

       //then puts it back to orig value
      gformat.length = 0;
            
      while(fir < nlen )  {//2
      
            gdata.number = fir +1;
            str = "date" + std::to_string( fir+1 );
            strcpy(  gdata.date, str.c_str(  ) );
            
            str = "name" + std::to_string( fir+1 );
            strcpy(  gdata.name, str.c_str(  ) );            
            gdata.amount = fir +10;
            
            gwrite.write( ( const char*) &gdata, sizeof( struct stdata )  ) ;             
            
            fir +=1;            
      }//3

      gwrite.close(  );
            
}//2

//its like an array of object  output --> data_array[ index ] = input 
//pindex is index, pinp_data is input, return is output
struct stdata fdata_array( int pindex, struct stdata pinp_data){//2
      //L40 
      //std::cout << "\ndebug L41 pinp_data.number " << pinp_data.number << "\n";

      gread.open( _FILENAME, std::ios::binary);

      if( !gread ) {//4
            std::cout << "\n\nerror cannot open file " << _FILENAME << " for reading...\n";
            getchar();
          
            return gblank_data;
      }//4

      if( pinp_data.number == -1 ) {//3
            //output 
     
            //std::cout << "\ndebug L42 inside if pinp_data.number true " << "\n";

            gread.read(  (char*) &gformat, sizeof( struct stformat )  );
            
            for( int fir=1; fir < gformat.length; fir+=1 ) {//4

                  gread.read(  (char*) &gdata, sizeof( struct stdata )  );
                  
                  if( fir -1 == pindex ) {//5
                        //it found
                                            
                        break;
                  }//5
                  
            }//4

      }else {//3
            //edit elements

            //std::cout << "\ndebug L42_2 inside if pinp_data.number false " << "\n";

            gwrite.open( TRANSFER_FILE_NAME, std::ios::binary);

            if( !gwrite ) {//4
                  std::cout << "\n\nerror cannot open file " << _FILENAME << " for writing...\n";
                  getchar();
                  
                  return gblank_data;
            }//4

            gread.read(  (char*) &gformat, sizeof( struct stformat )  );
            
            gwrite.write( (const char*) &gformat, sizeof( struct stformat )  ) ;   

            for( int fir=1; fir <= gformat.length; fir+=1 ) {//10
            
                  //std::cout << "\ndebug L42_3 inside for( int fir   fir " << fir << " , pindex " << pindex <<"\n";

                  gread.read(  (char*) &gdata, sizeof( struct stdata )  );
                                    
                  if( fir -1 == pindex ) {//11
                        
                        gdata = pinp_data;
                        /*  
                        std::cout << "\ndebug L42_4 inside if( fir -1 true  fir " << fir << " , pindex " << pindex ;
                        std::cout << "\nnumber " << gdata.number ;                  
                        std::cout << "\ndate " << gdata.date ;
                        std::cout << "\nname " << gdata.name ;
                        std::cout << "\namount " << gdata.amount << "\n";
                        */
                  }//11

                  gwrite.write(  (char*) &gdata, sizeof( struct stdata )  );

            }//10
      
            gwrite.close(  );

            //deleting old file
            if( std::remove( _FILENAME ) != 0) {//14
                  std::cout << "\n\nerror cannot remove file " <<  _FILENAME << "\n";
                  getchar();

            }//14  

            //rename new file
            if( std::rename( TRANSFER_FILE_NAME , _FILENAME ) != 0) {//12 
                  std::cout << "\n\nerror cannot rename file " << TRANSFER_FILE_NAME << "\n";
                  getchar();
                  
            }//12
      }//3

      gread.close(  );
      return gdata;

}//2


int main( void ) {  //2

      //L10 
     
      int index;

       //dont change default number for gblank_data
      gblank_data.number = -1;
     
      finitial(  );
      
      std::cout << "\n\nipakita lahat ng files gamit ang fdata_array\n";

      int nlen = 10;  //i assume 10 elements
      for( int fir =0 ; fir < 10; fir+=1 ) { //3 
      
            gdata = fdata_array(fir);
            std::cout << "\n\nindex " << fir;
            std::cout << "\nnumber " << gdata.number ;                  
            std::cout << "\ndate " << gdata.date ;
            std::cout << "\nname " << gdata.name ;
            std::cout << "\namount " << gdata.amount ;
            
      }//3

      std::cout << "\n\ninput ang index na i edit range 0 to 9:  ";
      std::cin >> index;      
      ffail_cin(  );

      std::cout << "\n\ninput number  date  name  amount\n     ";
      std::cin >> gdata.number >> gdata.date >> gdata.name >>  gdata.amount;      
      ffail_cin(  );

      std::cout << "\n\nito ung ipang eedit\nnumber " << gdata.number ;                  
      std::cout << "\ndate " << gdata.date ;
      std::cout << "\nname " << gdata.name ;
      std::cout << "\namount " << gdata.amount ;

      fdata_array(index, gdata);

      std::cout << "\n\ndisplay all \n";
      fdisplay_all(  );
       
      std::cout << "\n\nccexit..." << "\n";
      getchar();
      return 0;
}//2


















