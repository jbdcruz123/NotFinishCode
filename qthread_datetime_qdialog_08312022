
import sys
from PyQt5 import QtWidgets, QtCore
import datetime
import time

time_to_quit = False
class paren(QtWidgets.QWidget):#1

      def __init__(self, _name):#2
            super().__init__()
            self._name = _name
            self.setWindowTitle("main parent")
            self.setFixedSize(600,400)
            self.move(200,200)
            self.label = QtWidgets.QLabel(parent=self, text="this is the parent")
            self.label.resize(200, 50)
            self.label.move(250,150)
            self.butto = QtWidgets.QPushButton(parent=self, text="close")
            self.butto.resize(200, 50)
            self.butto.move(250,200)
            
            self.butto.clicked.connect(self.f_click)
      #2

      def f_click(self):#3

            self.close()
      #3
#1


class child(QtWidgets.QDialog):#1

      def __init__(self, paren = None, _name = "first"):#2
            super().__init__(paren)
            self._name = _name
            self.setWindowTitle("enter password   ")
            self.setFixedSize(400,300)
            self.move(100,100)

            self.label = QtWidgets.QLabel(parent=self, text="input: ")
            self.label.resize(150, 30)
            self.label.move(70,10)

            self.edit = QtWidgets.QLineEdit(parent=self, text="")
            self.edit.resize(200, 30)
            self.edit.move(120,10)
            
            self.butto = QtWidgets.QPushButton(parent=self, text="ok")
            self.butto.resize(300, 30)
            self.butto.move(50,60)
            self.butto.clicked.connect(self.f_click)
            self.paren=None
            self.setModal(True)
      #2
      def f_click(self):#3

            if self.edit.text() == "123":#2
               
                  #need parameter to close
                  #self.done(0)
                  self.accept()
                  self.paren.label.setText("password is right")
                  return
            #2

            QtWidgets.QMessageBox.information(self, "mesanhe", "wrong password")
      #3
      def closeEvent(self, event):#3
            global time_to_quit
            
            time_to_quit = True
      #3

      def keyPressEvent(self, event):#2
            #L20
            #prevent the base class to call this
            #super().keyPressEvent(event)
            
            print(f"{event.key()= }")
            if 16777216 == event.key() :#3
                  event.ignore()
                  print(f"L20 \n")
            #3
      #2
#1

class TimeThread(QtCore.QThread):#1
      global time_to_quit
      currentTimeSignal = QtCore.pyqtSignal(str)
      def __init__(self, _input):#2

            super().__init__()

            self._input = _input
      #2

      def run(self):#2

            while True:#3
                  #format ng date 
                  #strftime('%b %d, %Y %I:%M:%S %p')
                  current_date = datetime.datetime.now().strftime('%I:%M:%S %p')
                  self.currentTimeSignal.emit(current_date)

                  self._input.setWindowTitle(f"enter password (is 123)  {current_date}")
                  print(f"{current_date= }")
                  time.sleep(0.5)

                  if time_to_quit == True:#4
                        print(f"ANG USER AY NAG DECIDE NA MAG QUIT")
                        appli.quit()
                  #4
            #3
      
      #2
#1

appli = QtWidgets.QApplication(sys.argv)

_paren = paren("parents") 

_child = child(_paren, "child")
_child.paren = _paren

_timer = TimeThread(_child)
_timer.start()

_paren.show()
_child.show()

appli.exec()
sys.exit()




